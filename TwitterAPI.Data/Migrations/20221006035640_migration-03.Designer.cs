// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TwitterAPI.Data.Context;

#nullable disable

namespace TwitterAPI.Data.Migrations
{
    [DbContext(typeof(TweetDbContext))]
    [Migration("20221006035640_migration-03")]
    partial class migration03
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TwitterAPI.Domain.Model.Tweet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tweets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTimeOffset(new DateTime(2022, 10, 6, 3, 56, 40, 423, DateTimeKind.Unspecified).AddTicks(2360), new TimeSpan(0, 0, 0, 0, 0)),
                            Text = "Tweet 1"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTimeOffset(new DateTime(2022, 10, 6, 3, 56, 40, 423, DateTimeKind.Unspecified).AddTicks(2363), new TimeSpan(0, 0, 0, 0, 0)),
                            Text = "Tweet 2"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTimeOffset(new DateTime(2022, 10, 6, 3, 56, 40, 423, DateTimeKind.Unspecified).AddTicks(2364), new TimeSpan(0, 0, 0, 0, 0)),
                            Text = "Tweet 3"
                        });
                });

            modelBuilder.Entity("TwitterAPI.Domain.Model.TweetAggregatedStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AggregationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfTweets")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpToDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("TweetAggregatedStatistics");
                });

            modelBuilder.Entity("TwitterAPI.Domain.Model.TweetHashtag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Hashtag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TweetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TweetId");

                    b.ToTable("TweetHashtags");
                });

            modelBuilder.Entity("TwitterAPI.Domain.Model.TweetHashtagsAggregatedStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Hashtag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HashtagCount")
                        .HasColumnType("int");

                    b.Property<int>("TweetAggregatedStatisticId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TweetAggregatedStatisticId");

                    b.ToTable("TweetHashtagsAggregatedStatistics");
                });

            modelBuilder.Entity("TwitterAPI.Domain.Model.TweetHashtag", b =>
                {
                    b.HasOne("TwitterAPI.Domain.Model.Tweet", null)
                        .WithMany("Hashtags")
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitterAPI.Domain.Model.TweetHashtagsAggregatedStatistic", b =>
                {
                    b.HasOne("TwitterAPI.Domain.Model.TweetAggregatedStatistic", null)
                        .WithMany("Top10Hashtags")
                        .HasForeignKey("TweetAggregatedStatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwitterAPI.Domain.Model.Tweet", b =>
                {
                    b.Navigation("Hashtags");
                });

            modelBuilder.Entity("TwitterAPI.Domain.Model.TweetAggregatedStatistic", b =>
                {
                    b.Navigation("Top10Hashtags");
                });
#pragma warning restore 612, 618
        }
    }
}
